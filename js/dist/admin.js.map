{"version":3,"sources":["webpack://@fof/upload/webpack/bootstrap","webpack://@fof/upload/external \"flarum.core.compat['app']\"","webpack://@fof/upload/external \"flarum.core.compat['extend']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Select']\"","webpack://@fof/upload/./node_modules/.pnpm/registry.npm.taobao.org/@babel/runtime/7.8.4/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/upload/external \"flarum.core.compat['Component']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Button']\"","webpack://@fof/upload/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://@fof/upload/external \"flarum.core.compat['components/AdminNav']\"","webpack://@fof/upload/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/saveSettings']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Alert']\"","webpack://@fof/upload/external \"flarum.core.compat['components/UploadImageButton']\"","webpack://@fof/upload/./src/admin/components/UploadPage.js","webpack://@fof/upload/./src/admin/index.js","webpack://@fof/upload/./src/admin/addUploadPane.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","UploadPage","init","this","loading","fields","checkboxes","objects","watermarkPositions","settings","app","data","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","prop","JSON","parse","mimeTypes","adapter","template","newMimeType","regex","view","onsubmit","translator","trans","maxFileSize","oninput","withAttr","keys","map","mime","config","updateMimeTypeKey","Select","component","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button","type","className","children","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","Switch","state","mustResize","resizeMaxWidth","disabled","addsWatermarks","watermarkPosition","UploadImageButton","disableHotlinkProtection","disableDownloadLogging","cdnUrl","imgurClientId","qiniuKey","qiniuSecret","qiniuBucket","qiniuCdn","upyunOperator","upyunPassword","upyunBucket","upyunCdn","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","awsS3Endpoint","awsS3Cdn","changed","option","push","description","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","preventDefault","alerts","dismiss","successAlert","saveSettings","then","show","Alert","redraw","Component","initializers","add","routes","path","extensionSettings","route","extend","AdminNav","items","AdminLinkButton","href","icon","PermissionGrid","label","permission","allowGuest"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Select'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/PermissionGrid'];","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/UploadImageButton'];","import app from 'flarum/app';\r\nimport Component from 'flarum/Component';\r\nimport Button from 'flarum/components/Button';\r\nimport saveSettings from 'flarum/utils/saveSettings';\r\nimport Alert from 'flarum/components/Alert';\r\nimport Select from 'flarum/components/Select';\r\nimport Switch from 'flarum/components/Switch';\r\nimport UploadImageButton from 'flarum/components/UploadImageButton';\r\n\r\n/* global m */\r\n\r\nexport default class UploadPage extends Component {\r\n\r\n    init() {\r\n        // whether we are saving the settings or not right now\r\n        this.loading = false;\r\n\r\n        // the fields we need to watch and to save\r\n        this.fields = [\r\n            // image\r\n            'resizeMaxWidth',\r\n            'cdnUrl',\r\n            'maxFileSize',\r\n            // watermark\r\n            'watermark',\r\n            'watermarkPosition',\r\n            // Imgur\r\n            'imgurClientId',\r\n            // AWS\r\n            'awsS3Key',\r\n            'awsS3Secret',\r\n            'awsS3Bucket',\r\n            'awsS3Region',\r\n            'awsS3Cdn',\r\n            'awsS3Endpoint',\r\n            // QIniu\r\n            'qiniuKey',\r\n            'qiniuSecret',\r\n            'qiniuBucket',\r\n            'qiniuCdn',\r\n            // Upyun\r\n            'upyunBucket',\r\n            'upyunOperator',\r\n            'upyunPassword',\r\n            'upyunCdn',\r\n        ];\r\n\r\n        // the checkboxes we need to watch and to save.\r\n        this.checkboxes = [\r\n            'mustResize',\r\n            'addsWatermarks',\r\n\r\n            'disableHotlinkProtection',\r\n            'disableDownloadLogging',\r\n        ];\r\n\r\n        // fields that are objects\r\n        this.objects = [\r\n            'mimeTypes',\r\n        ];\r\n\r\n        // watermark positions\r\n        this.watermarkPositions = {\r\n            'top-left': 'top-left',\r\n            'top-right': 'top-right',\r\n            'bottom-left': 'bottom-left',\r\n            'bottom-right': 'bottom-right',\r\n            'center': 'center',\r\n            'left': 'left',\r\n            'top': 'top',\r\n            'right': 'right',\r\n            'bottom': 'bottom',\r\n        };\r\n\r\n        // get the saved settings from the database\r\n        const settings = app.data.settings;\r\n\r\n        // our package prefix (to be added to every field and checkbox in the setting table)\r\n        this.settingsPrefix = 'fof-upload';\r\n\r\n        // Options for the Upload methods dropdown menu.\r\n        this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\r\n        // Options for the Template dropdown menu.\r\n        this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\r\n\r\n        // Contains current values.\r\n        this.values = {};\r\n        // bind the values of the fields and checkboxes to the getter/setter functions\r\n        this.fields.forEach(key =>\r\n            this.values[key] = m.prop(settings[this.addPrefix(key)])\r\n        );\r\n        this.checkboxes.forEach(key =>\r\n            this.values[key] = m.prop(settings[this.addPrefix(key)] === '1')\r\n        );\r\n        this.objects.forEach(key =>\r\n            this.values[key] = settings[this.addPrefix(key)] ? m.prop(JSON.parse(settings[this.addPrefix(\r\n                key)])) : m.prop()\r\n        );\r\n\r\n        // Set a sane default in case no mimeTypes have been configured yet.\r\n        this.values.mimeTypes() || (this.values.mimeTypes = m.prop({\r\n            '^image\\\\/.*': {\r\n                adapter: 'local',\r\n                template: 'image-preview',\r\n            },\r\n        }));\r\n\r\n        this.newMimeType = {\r\n            regex: m.prop(''),\r\n            adapter: m.prop('local'),\r\n            template: m.prop('file'),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Show the actual ImageUploadPage.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    view() {\r\n        return [\r\n            m('.UploadPage', [\r\n                m('.container', [\r\n                    m('form', {\r\n                        onsubmit: this.onsubmit.bind(this),\r\n                    }, [\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.preferences.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.preferences.max_file_size')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.maxFileSize() || 2048,\r\n                                oninput: m.withAttr('value', this.values.maxFileSize),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.preferences.mime_types')),\r\n                            m('.MimeTypes--Container',\r\n                                Object.keys(this.values.mimeTypes())\r\n                                    .map(mime => {\r\n                                        let config = this.values.mimeTypes()[mime];\r\n                                        // Compatibility for older versions.\r\n                                        if (typeof config !== 'object') {\r\n                                            config = {\r\n                                                adapter: config,\r\n                                                template: 'file',\r\n                                            };\r\n                                        }\r\n\r\n                                        return m('div', [\r\n                                            m('input.FormControl.MimeTypes', {\r\n                                                value: mime,\r\n                                                oninput: m.withAttr('value', this.updateMimeTypeKey.bind(this, mime)),\r\n                                            }),\r\n                                            Select.component({\r\n                                                options: this.uploadMethodOptions,\r\n                                                onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\r\n                                                value: config.adapter || 'local',\r\n                                            }),\r\n                                            Select.component({\r\n                                                options: this.getTemplateOptionsForInput(),\r\n                                                onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\r\n                                                value: config.template || 'local',\r\n                                            }),\r\n                                            Button.component({\r\n                                                type: 'button',\r\n                                                className: 'Button Button--warning',\r\n                                                children: 'x',\r\n                                                onclick: this.deleteMimeType.bind(this, mime),\r\n                                            }),\r\n                                        ]);\r\n                                    }),\r\n                                m('br'),\r\n                                m('div', [\r\n                                    m('input.FormControl.MimeTypes.add-MimeType-key', {\r\n                                        value: this.newMimeType.regex(),\r\n                                        oninput: m.withAttr('value', this.newMimeType.regex),\r\n                                    }),\r\n                                    Select.component({\r\n                                        options: this.uploadMethodOptions,\r\n                                        className: 'add-MimeType-value',\r\n                                        oninput: m.withAttr('value', this.newMimeType.adapter),\r\n                                        value: this.newMimeType.adapter(),\r\n                                    }),\r\n                                    Select.component({\r\n                                        options: this.getTemplateOptionsForInput(),\r\n                                        className: 'add-MimeType-value',\r\n                                        oninput: m.withAttr('value', this.newMimeType.template),\r\n                                        value: this.newMimeType.template(),\r\n                                    }),\r\n                                    Button.component({\r\n                                        type: 'button',\r\n                                        className: 'Button Button--warning',\r\n                                        children: '+',\r\n                                        onclick: this.addMimeType.bind(this),\r\n                                    }),\r\n                                ]),\r\n                            ),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.mime_types')),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.download_templates')),\r\n                            this.templateOptionsDescriptions(),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.resize.title')),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.resize')),\r\n                            Switch.component({\r\n                                state: this.values.mustResize() || false,\r\n                                children: app.translator.trans('fof-upload.admin.labels.resize.toggle'),\r\n                                onchange: this.values.mustResize,\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.resize.max_width')),\r\n                            m('input', {\r\n                                className: 'FormControl',\r\n                                value: this.values.resizeMaxWidth() || 100,\r\n                                oninput: m.withAttr('value', this.values.resizeMaxWidth),\r\n                                disabled: !this.values.mustResize(),\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.watermark.title')),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.watermark')),\r\n                            Switch.component({\r\n                                state: this.values.addsWatermarks() || false,\r\n                                children: app.translator.trans('fof-upload.admin.labels.watermark.toggle'),\r\n                                onchange: this.values.addsWatermarks,\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.watermark.position')),\r\n                            m('div', [\r\n                                Select.component({\r\n                                    options: this.watermarkPositions,\r\n                                    onchange: this.values.watermarkPosition,\r\n                                    value: this.values.watermarkPosition() || 'bottom-right',\r\n                                }),\r\n                            ]),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.watermark.file')),\r\n                            UploadImageButton.component({\r\n                                name: 'fof/watermark',\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.title')),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-hotlink-protection')),\r\n                            Switch.component({\r\n                                state: this.values.disableHotlinkProtection() || false,\r\n                                children: app.translator.trans(\r\n                                    'fof-upload.admin.labels.disable-hotlink-protection.toggle'),\r\n                                onchange: this.values.disableHotlinkProtection,\r\n                            }),\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.disable-download-logging.title')),\r\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-download-logging')),\r\n                            Switch.component({\r\n                                state: this.values.disableDownloadLogging() || false,\r\n                                children: app.translator.trans('fof-upload.admin.labels.disable-download-logging.toggle'),\r\n                                onchange: this.values.disableDownloadLogging,\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.local.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.local.cdn_url')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.cdnUrl() || '',\r\n                                oninput: m.withAttr('value', this.values.cdnUrl),\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.imgur.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.imgur.client_id')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.imgurClientId() || '',\r\n                                oninput: m.withAttr('value', this.values.imgurClientId),\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.qiniu.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.qiniu.key')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.qiniuKey() || '',\r\n                                oninput: m.withAttr('value', this.values.qiniuKey),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.secret')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.qiniuSecret() || '',\r\n                                oninput: m.withAttr('value', this.values.qiniuSecret),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.bucket')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.qiniuBucket() || '',\r\n                                oninput: m.withAttr('value', this.values.qiniuBucket),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.cdn')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.qiniuCdn() || '',\r\n                                oninput: m.withAttr('value', this.values.qiniuCdn),\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.upyun.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.upyun.operator')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.upyunOperator() || '',\r\n                                oninput: m.withAttr('value', this.values.upyunOperator),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.upyun.password')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.upyunPassword() || '',\r\n                                oninput: m.withAttr('value', this.values.upyunPassword),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.upyun.bucket')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.upyunBucket() || '',\r\n                                oninput: m.withAttr('value', this.values.upyunBucket),\r\n                            }),\r\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.upyun.cdn')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.upyunCdn() || '',\r\n                                oninput: m.withAttr('value', this.values.upyunCdn),\r\n                            }),\r\n                        ]),\r\n                        m('fieldset', [\r\n                            m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.title')),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.key')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Key() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Key),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.secret')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Secret() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Secret),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.bucket')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Bucket() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Bucket),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.region')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Region() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Region),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.endpoint')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Endpoint() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Endpoint),\r\n                            }),\r\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.cdn')),\r\n                            m('input.FormControl', {\r\n                                value: this.values.awsS3Cdn() || '',\r\n                                oninput: m.withAttr('value', this.values.awsS3Cdn),\r\n                            }),\r\n                        ]),\r\n                        Button.component({\r\n                            type: 'submit',\r\n                            className: 'Button Button--primary',\r\n                            children: app.translator.trans('fof-upload.admin.buttons.save'),\r\n                            loading: this.loading,\r\n                            disabled: !this.changed(),\r\n                        }),\r\n                    ]),\r\n                ]),\r\n            ]),\r\n        ];\r\n    }\r\n\r\n    getTemplateOptionsForInput() {\r\n        const options = {};\r\n\r\n        for (let option in this.templateOptions) {\r\n            if (!this.templateOptions.hasOwnProperty(option)) {\r\n                continue;\r\n            }\r\n\r\n            options[option] = this.templateOptions[option].name;\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    updateMimeTypeKey(mime, value) {\r\n        this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\r\n\r\n        this.deleteMimeType(mime);\r\n    }\r\n\r\n    updateMimeTypeAdapter(mime, config, value) {\r\n        config.adapter = value;\r\n        this.values.mimeTypes()[mime] = config;\r\n    }\r\n\r\n    updateMimeTypeTemplate(mime, config, value) {\r\n        config.template = value;\r\n        this.values.mimeTypes()[mime] = config;\r\n    }\r\n\r\n    deleteMimeType(mime) {\r\n        delete this.values.mimeTypes()[mime];\r\n    }\r\n\r\n    templateOptionsDescriptions() {\r\n        const children = [];\r\n\r\n        for (let template in this.templateOptions) {\r\n            if (!this.templateOptions.hasOwnProperty(template)) {\r\n                continue;\r\n            }\r\n\r\n            children.push(m('li', this.templateOptions[template].name + ': ' + this.templateOptions[template].description));\r\n        }\r\n\r\n        return m('ul', children);\r\n    }\r\n\r\n    addMimeType() {\r\n        this.values.mimeTypes()[this.newMimeType.regex()] = {\r\n            adapter: this.newMimeType.adapter(),\r\n            template: this.newMimeType.template()\r\n        };\r\n\r\n        this.newMimeType.regex('');\r\n        this.newMimeType.adapter('local');\r\n        this.newMimeType.template('file');\r\n    }\r\n\r\n    /**\r\n     * Checks if the values of the fields and checkboxes are different from\r\n     * the ones stored in the database\r\n     *\r\n     * @returns boolean\r\n     */\r\n    changed() {\r\n        const fieldsCheck = this.fields.some(\r\n            key => this.values[key]() !== app.data.settings[this.addPrefix(key)]);\r\n        const checkboxesCheck = this.checkboxes.some(\r\n            key => this.values[key]() !== (app.data.settings[this.addPrefix(key)] === '1'));\r\n        const objectsCheck = this.objects.some(\r\n            key => JSON.stringify(this.values[key]()) !== (app.data.settings[this.addPrefix(key)]));\r\n        return fieldsCheck || checkboxesCheck || objectsCheck;\r\n    }\r\n\r\n    /**\r\n     * Saves the settings to the database and redraw the page\r\n     *\r\n     * @param e\r\n     */\r\n    onsubmit(e) {\r\n        // prevent the usual form submit behaviour\r\n        e.preventDefault();\r\n\r\n        // if the page is already saving, do nothing\r\n        if (this.loading) return;\r\n\r\n        // prevents multiple savings\r\n        this.loading = true;\r\n\r\n        // remove previous success popup\r\n        app.alerts.dismiss(this.successAlert);\r\n\r\n        const settings = {};\r\n\r\n        // gets all the values from the form\r\n        this.fields.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\r\n        this.checkboxes.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\r\n        this.objects.forEach(key => settings[this.addPrefix(key)] = JSON.stringify(this.values[key]()));\r\n\r\n        // actually saves everything in the database\r\n        saveSettings(settings)\r\n            .then(() => {\r\n                // on success, show popup\r\n                app.alerts.show(this.successAlert = new Alert({\r\n                    type: 'success',\r\n                    children: app.translator.trans('core.admin.basics.saved_message'),\r\n                }));\r\n            })\r\n            .catch(() => {\r\n            })\r\n            .then(() => {\r\n                // return to the initial state and redraw the page\r\n                this.loading = false;\r\n                m.redraw();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Adds the prefix `this.settingsPrefix` at the beginning of `key`\r\n     *\r\n     * @returns string\r\n     */\r\n    addPrefix(key) {\r\n        return this.settingsPrefix + '.' + key;\r\n    }\r\n}\r\n","import {extend} from 'flarum/extend';\r\nimport app from 'flarum/app';\r\nimport PermissionGrid from 'flarum/components/PermissionGrid';\r\nimport addUploadPane from './addUploadPane';\r\n\r\napp.initializers.add('fof-upload', app => {\r\n    // add the admin pane\r\n    addUploadPane();\r\n\r\n    // add the permission option to the relative pane\r\n    extend(PermissionGrid.prototype, 'startItems', items => {\r\n        items.add('fof-upload', {\r\n            icon: 'far fa-file',\r\n            label: app.translator.trans('fof-upload.admin.permissions.upload_label'),\r\n            permission: 'fof-upload.upload',\r\n        });\r\n    });\r\n\r\n    // add the permission option to the relative pane\r\n    extend(PermissionGrid.prototype, 'viewItems', items => {\r\n        items.add('fof-download', {\r\n            icon: 'fas fa-download',\r\n            label: app.translator.trans('fof-upload.admin.permissions.download_label'),\r\n            permission: 'fof-upload.download',\r\n            allowGuest: true,\r\n        });\r\n    });\r\n});\r\n","import app from 'flarum/app';\r\nimport {extend} from 'flarum/extend';\r\nimport AdminNav from 'flarum/components/AdminNav';\r\nimport AdminLinkButton from 'flarum/components/AdminLinkButton';\r\nimport UploadPage from './components/UploadPage';\r\n\r\nexport default function () {\r\n    app.routes['fof-upload'] = {path: '/fof/upload', component: UploadPage.component()};\r\n    app.extensionSettings['fof-upload'] = () => m.route(app.route('fof-upload'));\r\n\r\n    extend(AdminNav.prototype, 'items', items => {\r\n        items.add('fof-upload', AdminLinkButton.component({\r\n            href: app.route('fof-upload'),\r\n            icon: 'far fa-file',\r\n            children: app.translator.trans('fof-upload.admin.title'),\r\n            description: app.translator.trans('fof-upload.admin.help_texts.description'),\r\n        }));\r\n    });\r\n}\r\n"],"sourceRoot":""}